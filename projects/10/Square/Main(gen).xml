<class>
<keyword>class</keyword>
<defineclass>Main</defineclass>
<symbol>{</symbol>
<classVarDec>
<keyword>static</keyword>
<keyword>boolean</keyword>
<definestatic0>test</definestatic0>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>function</keyword>
<keyword>void</keyword>
<definesubroutine>main</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<identifier>SquareGame</identifier>
<definevar0>game</definevar0>
<symbol>;</symbol>
</varDec>
<statements>
<letStatement>
<keyword>let</keyword>
<usevar0>game</usevar0>
<symbol>=</symbol>
<expression>
<term>
<useclass>SquareGame</useclass>
<symbol>.</symbol>
<usesubroutine>new</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<usevar0>game</usevar0>
<symbol>.</symbol>
<usesubroutine>run</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<usevar0>game</usevar0>
<symbol>.</symbol>
<usesubroutine>dispose</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>function</keyword>
<keyword>void</keyword>
<definesubroutine>test</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<keyword>int</keyword>
<definevar0>i</definevar0>
<symbol>,</symbol>
<definevar1>j</definevar1>
<symbol>;</symbol>
</varDec>
<varDec>
<keyword>var</keyword>
<identifier>String</identifier>
<definevar2>s</definevar2>
<symbol>;</symbol>
</varDec>
<varDec>
<keyword>var</keyword>
<identifier>Array</identifier>
<definevar3>a</definevar3>
<symbol>;</symbol>
</varDec>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<usevar2>s</usevar2>
<symbol>=</symbol>
<expression>
<term>
<stringConstant>string constant</stringConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usevar2>s</usevar2>
<symbol>=</symbol>
<expression>
<term>
<keyword>null</keyword>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usevar3>a</usevar3>
<symbol>[</symbol>
<expression>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>]</symbol>
<symbol>=</symbol>
<expression>
<term>
<usevar3>a</usevar3>
<symbol>[</symbol>
<expression>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>]</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<usevar0>i</usevar0>
<symbol>=</symbol>
<expression>
<term>
<usevar0>i</usevar0>
</term>
<symbol>*</symbol>
<term>
<symbol>(</symbol>
<expression>
<term>
<symbol>-</symbol>
<term>
<usevar1>j</usevar1>
</term>
</term>
</expression>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usevar1>j</usevar1>
<symbol>=</symbol>
<expression>
<term>
<usevar1>j</usevar1>
</term>
<symbol>/</symbol>
<term>
<symbol>(</symbol>
<expression>
<term>
<symbol>-</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</term>
</expression>
<symbol>)</symbol>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usevar0>i</usevar0>
<symbol>=</symbol>
<expression>
<term>
<usevar0>i</usevar0>
</term>
<symbol>|</symbol>
<term>
<usevar1>j</usevar1>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
