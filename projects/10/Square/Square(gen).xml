<class>
<keyword>class</keyword>
<defineclass>Square</defineclass>
<symbol>{</symbol>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<definefield0>x</definefield0>
<symbol>,</symbol>
<definefield1>y</definefield1>
<symbol>;</symbol>
</classVarDec>
<classVarDec>
<keyword>field</keyword>
<keyword>int</keyword>
<definefield2>size</definefield2>
<symbol>;</symbol>
</classVarDec>
<subroutineDec>
<keyword>constructor</keyword>
<identifier>Square</identifier>
<definesubroutine>new</definesubroutine>
<symbol>(</symbol>
<parameterList>
<keyword>int</keyword>
<definearg0>Ax</definearg0>
<symbol>,</symbol>
<keyword>int</keyword>
<definearg1>Ay</definearg1>
<symbol>,</symbol>
<keyword>int</keyword>
<definearg2>Asize</definearg2>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<letStatement>
<keyword>let</keyword>
<usefield0>x</usefield0>
<symbol>=</symbol>
<expression>
<term>
<usearg0>Ax</usearg0>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usefield1>y</usefield1>
<symbol>=</symbol>
<expression>
<term>
<usearg1>Ay</usearg1>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<letStatement>
<keyword>let</keyword>
<usefield2>size</usefield2>
<symbol>=</symbol>
<expression>
<term>
<usearg2>Asize</usearg2>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<usesubroutine>draw</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<expression>
<term>
<keyword>this</keyword>
</term>
</expression>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>dispose</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Memory</useclass>
<symbol>.</symbol>
<usesubroutine>deAlloc</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>this</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>draw</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>erase</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>incSize</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>254</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>&amp;</symbol>
<term>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>510</integerConstant>
</term>
</expression>
<symbol>)</symbol>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<usesubroutine>erase</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield2>size</usefield2>
<symbol>=</symbol>
<expression>
<term>
<usefield2>size</usefield2>
</term>
<symbol>+</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<usesubroutine>draw</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>decSize</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<usefield2>size</usefield2>
</term>
<symbol>&gt;</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<usesubroutine>erase</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield2>size</usefield2>
<symbol>=</symbol>
<expression>
<term>
<usefield2>size</usefield2>
</term>
<symbol>-</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<usesubroutine>draw</usesubroutine>
<symbol>(</symbol>
<expressionList>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>moveUp</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>&gt;</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>-</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield1>y</usefield1>
<symbol>=</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>-</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>moveDown</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>254</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield1>y</usefield1>
<symbol>=</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>-</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>moveLeft</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>&gt;</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>-</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield0>x</usefield0>
<symbol>=</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>-</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword>method</keyword>
<keyword>void</keyword>
<definesubroutine>moveRight</definesubroutine>
<symbol>(</symbol>
<parameterList>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<statements>
<ifStatement>
<keyword>if</keyword>
<symbol>(</symbol>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>&lt;</symbol>
<term>
<integerConstant>510</integerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>false</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<usefield0>x</usefield0>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<letStatement>
<keyword>let</keyword>
<usefield0>x</usefield0>
<symbol>=</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<integerConstant>2</integerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>setColor</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<keyword>true</keyword>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
<doStatement>
<keyword>do</keyword>
<useclass>Screen</useclass>
<symbol>.</symbol>
<usesubroutine>drawRectangle</usesubroutine>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<symbol>(</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>)</symbol>
</term>
<symbol>-</symbol>
<term>
<integerConstant>1</integerConstant>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield0>x</usefield0>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
<symbol>,</symbol>
<expression>
<term>
<usefield1>y</usefield1>
</term>
<symbol>+</symbol>
<term>
<usefield2>size</usefield2>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
<symbol>;</symbol>
</doStatement>
</statements>
<symbol>}</symbol>
</ifStatement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
