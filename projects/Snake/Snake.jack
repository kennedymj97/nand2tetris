class Snake {
    field int direction; // 0 = none, 1 = up, 2 = right, 3 = down, 4 = left;
    field Grid grid;
    field Array snakeX, snakeY;
    field Array tempX, tempY;
    field int snakeLen, snakeMem;
    field bool hitTail;

    constructor Snake new(int xPos, int yPos) {
        var int cols, rows;
        let grid = Grid.init();
        let rows = Grid.rows();
        let cols = Grid.cols();
        let snakeMem = cols*rows;
        let snakeX = Array.new(snakeMem);
        let snakeY = Array.new(snakeMem);
        let tempX = Array.new(snakeMem);
        let tempY = Array.new(snakeMem);
        let snakeX[0] = xPos;
        let snakeY[0] = yPos;
        let tempX[0] = xPos;
        let tempY[0] = yPos;
        let snakeLen = 1;
        let direction = 0;
        let hitTail = false;
        do draw();
        return this;
    }

    method void dispose() {
        do snakeX.dispose();
        do snakeY.dispose();
        do tempX.dispose();
        do tempY.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        do Grid.drawSquare(snakeX[0], snakeY[0], true);
        return;
    }

    method void updateDirection(int newDirection) {
        let direction = newDirection;
        return;
    }

    method void move(bool growSnake) {
        var int i;
        var int tailX, tailY;
        if (direction=0) {
            return;
        }

        let tailX = snakeX[(snakeLen-1)];
        let tailY = snakeY[(snakeLen-1)];

        // if grow add 1 to snake len
        if (growSnake) {
            let snakeLen = snakeLen + 1;
        }

        // propogate position of element to next section
        let i = 0;
        while (i < (snakeLen-1)) {
            let tempX[(i+1)] = snakeX[i];
            let tempY[(i+1)] = snakeY[i];
            let i = i + 1;
        }
        // update position of head
        if (direction=1) {
            let tempY[0] = snakeY[0] - 1;
        }
        if (direction=2) {
            let tempX[0] = snakeX[0] + 1;
        }
        if (direction=3) {
            let tempY[0] = snakeY[0] + 1;
        }
        if (direction=4) {
            let tempX[0] = snakeX[0] - 1;
        }
        // set it so snake is now equal to temp
        let i = 0;
        while (i<snakeLen) {
            let snakeX[i] = tempX[i];
            let snakeY[i] = tempY[i];
            if (i>0) {
                if ((snakeX[0]=snakeX[i]) & (snakeY[0]=snakeY[i])) {
                    let hitTail = true;
                }
            }
            let i = i + 1;
        }
        // draw new snake
        do draw();
        do Grid.drawSquare(tailX, tailY, false);
        return;
    }

    method int headX() {
        return snakeX[0];
    }

    method int headY() {
        return snakeY[0];
    }

    method bool hitTail() {
        return hitTail;
    }
}