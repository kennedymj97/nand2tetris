// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // core components
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=instructionmuxout);

    Not(in=instruction[15], out=aregloadcheck1);
    Or(a=instruction[5], b=aregloadcheck1, out=aregload);
    ARegister(in=instructionmuxout, load=aregload, out=aregout, out[0..14]=addressM);

    Mux16(a=aregout, b=inM, sel=instruction[12], out=inMmuxout);

    And(a=instruction[4], b=instruction[15], out=dregload);
    DRegister(in=aluout, load=dregload, out=dregout);

    ALU(x=dregout, y=inMmuxout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out[0..15]=aluout, out=outM, zr=aluzr, ng=alung);
    
    PC(in=aregout, load=makejump, inc=pcinc, reset=reset, out[0..14]=pc);
    
    // writeM logic
    Or(a=instruction[0], b=instruction[1], out=checknojump1);
    Or(a=checknojump1, b=instruction[2], out=checknojump2);
    Not(in=checknojump2, out=nojump);

    And(a=instruction[3], b=nojump, out=writemcheck1);
    And(a=writemcheck1, b=instruction[15], out=writeM);

    // useful logic
    And(a=instruction[0], b=instruction[1], out=jge);
    And(a=instruction[0], b=instruction[2], out=jne);
    And(a=instruction[1], b=instruction[2], out=jle);
    And(a=jge, b=instruction[2], out=jmp);

    // jump conditions
    Not(in=alung, out=notalung);
    Not(in=aluzr, out=notaluzr);
    And(a=notalung, b=notaluzr, out=aluoutpositive);
    Not(in=aluoutpositive, out=aluoutnotpositive);

    And(a=instruction[0], b=aluoutpositive, out=jumpcond1);
    And(a=instruction[1], b=aluzr, out=jumpcond2);
    And(a=jge, b=notalung, out=jumpcond3);
    And(a=instruction[2], b=alung, out=jumpcond4);
    And(a=jne, b=notaluzr, out=jumpcond5);
    And(a=jle, b=aluoutnotpositive, out=jumpcond6);

    Or8Way(in[0]=false, in[1]=jumpcond1, in[2]=jumpcond2, in[3]=jumpcond3, in[4]=jumpcond4, in[5]=jumpcond5, in[6]=jumpcond6, in[7]=false, out=jumpcondmet);
    And(a=instruction[15], b=jumpcondmet, out=makejump);

    Not(in=makejump, out=pcinc);
}